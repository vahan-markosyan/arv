const AuthSchema = require('../models/auth');
const axios = require('axios');
const token = process.env.TOKEN
const bot_id = process.env.BOT_ID
const telegramApiUrl = `https://api.telegram.org/bot${token}/sendMessage`;
const twilio = require('twilio');

const accountSid = process.env.TWILIO_ACCOUNT_SID; // –ù–∞–ø—Ä–∏–º–µ—Ä, 'ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
const authToken = process.env.TWILIO_AUTH_TOKEN;   // –ù–∞–ø—Ä–∏–º–µ—Ä, 'your_auth_token'


const client = twilio(accountSid, authToken);
class AuthController {
  async postAuth(req, res) {
    try {
      
      let { number, name, desc, date, email, service } = req.body;
      if (!number) return res.status(401).json({ err: "–ø–æ–ª—É number –ø—É—Å—Ç" })
      const newAuth = new AuthSchema(req.body);
      
      newAuth.id = String(newAuth._id)
      await newAuth.save();

      if (date) {
        date = date.replace("T", " ")
      }

      let info = 'not filled'
      const message =
        `üë§ New client \nüìû phone: ${number} \nüß© Name: ${name || info} \nüì• mail: ${email || info} \nüïì Date user want: ${date || info} \n‚ÑπÔ∏è message: ${desc || info}`
        
      await axios.post(telegramApiUrl, {
        chat_id: bot_id, // ID —á–∞—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
        text: message,  // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      });


      res.status(201).json({ data: newAuth });
    } catch (err) {
      console.log(err.message);
      res.status(500).json({ error: err.message });
    }
  }
  async getAuth(req, res) {
    try {
      const auths = await AuthSchema.find();
      res.status(200).json({ data: auths });
    } catch (err) {
      console.log(err.message);
      res.status(500).json({ error: err.message });
    }
  }
  async getAuthById(req, res) {
    try {
      const auths = await AuthSchema.findById(req.params.id);
      res.status(200).json({ data: auths });
    } catch (err) {
      console.log(err.message);
      res.status(500).json({ error: err.message });
    }
  }

  async putAuth(req, res) {
    try {
      const { id } = req.params;
      const { name, number, email, desc, date } = req.body;
      console.log(req.body, id);


      const product = await AuthSchema.findOne({ id: id });
      if (!product) {
        return res.status(404).json({ message: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }


      product.name = name != "null" ? name : product.name;
      product.number = number != "null" ? number : product.number;
      product.email = email != "null" ? email : product.email;
      product.desc = desc != "null" ? desc : product.desc;
      product.email = date != "null" ? date : product.date;




      await product.save();
      product.id = product._id.toString()

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º `id`
      res.status(200).json({
        data: product // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
      });
    } catch (error) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞' });
    }
  }

  async deleteAuth(req, res) {
    try {
      const { id } = req.params;
      console.log(id);

      const service = await AuthSchema.findOne({ id: id });
      if (!service) {
        return res.status(404).json({ message: 'Service not found' });
      }

      await AuthSchema.findByIdAndDelete(service._id);
      res.status(200).json({ message: 'Service deleted successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Failed to delete service', error: error.message });
    }
  };


  async sendMessage(req, res) {
    const { to, message } = req.body;

    if (!to || !message) {
      return res.status(400).send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    }

    try {
      // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (From) –¥–ª—è WhatsApp
      const response = await client.messages.create({
        body: message,
        from: 'whatsapp:+14155238886', // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–µ—Å–æ—á–Ω–∏—Ü—ã Twilio
        to: `whatsapp:${to}`, // –ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
      });

      res.status(200).json({
        success: true,
        message: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        response,
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        error: error.message,
      });
    }
  };

  async getMessage(req, res) {
    console.log(req.body);
    
    const message = req.body.Body; // –¢–µ–∫—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const from = req.body.From;   // –ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    console.log(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from}: ${message}`);

    // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    res.set('Content-Type', 'text/xml');
    res.send(`
      <Response>
        <Message>
          –ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"
        </Message>
      </Response>
    `);
  }

}

module.exports = new AuthController()